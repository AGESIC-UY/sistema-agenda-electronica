#Selecciona el perfil a generarse, al cambiar de perfil se cambia la personalización de SAE para cada organismo que lo utilice
build.profile=Default

#Estos son los valores posibles que puede tomar un escenario 
#y se terminan reflejando en nombres de .jars y en la propiedad uy.gub.imm.sae.escenario del profile.properties
build.sae.escenario.backend=BACKEND
build.sae.escenario.frontend=FRONTEND

build.security.domain.jndi=java:/jaas/SD-SAE-TEST
build.persistence.hibernate.hbm2ddl.auto=create-drop
build.sae.datasource=sae-test-ds

#Nombre del jar que contiene la configuracion del profile (arhivos de properties y demas)
build.sae.profile.jar=profile
#Nombre del EAR que tiene toda la lógica de SAE, representa la capa de servicios
build.sae.service.ear=sae-1-service
build.sae.service.ejb=sae-ejb
build.sae.service.ejb.client=sae-ejb-client
#Nombre del jar que tiene los EJB del profile
build.sae.profile.ejb=profile-ejb
#Nombre del EAR que tiene la interfaz de usuario de administración, gestión, reserva y atención de SAE, representa la capa de presentación de la intranet 
build.sae.backoffice.ear=sae-2-backoffice
#Nombre del EAR que tiene solametne la interfaz de usuario de la reserva web de SAE, representa la capa de presentación de internet 
build.sae.frontend.ear=sae-2-frontend
#Nombre del EAR que tiene los recursos gráficos para las capas de presentación: imagenes, css, templates
build.sae.recursos.ear=sae-1-recursos


##################
# APLICACION WEB
##################

#contextroot en el que será publicado la aplicacion web de recursos gráficos
build.sae.recursos.contextroot=SAE-Profile-Default-WEB
#contextroot en el que será publicado la aplicacion web del backoffice (administración, gestión, reserva y atención de SAE)
build.sae.backoffice.contextroot=sae-admin
#contextroot en el que será publicado la aplicacion web del frontend (reserva web de SAE)
build.sae.frontend.contextroot=sae
#contextroot en el que serán publicados los Web Services de la capa de servicios
build.sae.service.ws.contextroot=sae-ws
#Contenido personalizado del web.xml del BACKEND
build.sae.backoffice.web.xml.data=
#Contenido personalizado del web.xml del FRONTEND
build.sae.frontend.web.xml.data=
#Entra "Dependencies:" en el MANIFEST.MF de la aplicacion web del BACKEND
build.sae.backoffice.web.metainf.dependencies=
#Entra "Dependencies:" en el MANIFEST.MF de la aplicacion web del FRONTEND
build.sae.frontend.web.metainf.dependencies=

##################
#PATH JNDI DE EJBs
##################

#Es el path JNDI base en el que seran publicados los ejbs de SAE (NOTA: Puede ser diferente al nombre del ear)
build.sae.service.ejb.jndi_base=sae

#Esta parte del JNDI de estos EJBs la repito aquí (también estan en el jboss.xml y jboss-web.xml)
#por que los necesito en runtime para hacer el lookup en la reserva web y timer
#para lo cual tengo que sacar estos valores del profile.properites
# Por lo tanto los pongo aqui y por construcción (build) quedan en el profile.properties para ser accesidos luego en runtime
build.sae.service.ejb.jndi_agendar_reservas_bean=AgendarReservasBean/remote
build.sae.service.ejb.jndi_recursos_bean=RecursosBean/remote
build.sae.service.ejb.jndi_depurar_reservas_bean=DepurarReservasBean/remote
